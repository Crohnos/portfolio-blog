---
import BaseLayout from '../../layouts/BaseLayout.astro';
import PostCard from '../../components/PostCard';
import { getCollection } from 'astro:content';
import { calculateReadingTime, generateExcerpt } from '../../utils/blogHelpers';

export async function getStaticPaths() {
  const allPosts = await getCollection('blog', ({ data }) => {
    return !data.draft;
  });
  
  // Get all unique categories
  const categories = [...new Set(allPosts.flatMap(post => post.data.categories))];
  
  // Create a path for each category
  return categories.map(category => {
    const filteredPosts = allPosts.filter(post => 
      post.data.categories.includes(category)
    );
    
    return {
      params: { category: category.toLowerCase().replace(/ /g, '-') },
      props: { category, posts: filteredPosts },
    };
  });
}

const { category, posts } = Astro.props;
const baseUrl = import.meta.env.BASE_URL || '';

// Sort posts by date (newest first)
const sortedPosts = posts.sort((a, b) => 
  new Date(b.data.date).getTime() - new Date(a.data.date).getTime()
);

// Process posts to add reading time and excerpts
const processedPosts = await Promise.all(
  sortedPosts.map(async (post) => {
    const { remarkPluginFrontmatter } = await post.render();
    
    // Use plugin reading time if available, otherwise calculate
    const readingTime = remarkPluginFrontmatter?.minutesRead 
      ? `${remarkPluginFrontmatter.minutesRead} min read` 
      : `${calculateReadingTime(post.body)} min read`;
    
    // Generate excerpt
    const excerpt = generateExcerpt(post.body);
    
    return { post, readingTime, excerpt };
  })
);

// Format category name for display (capitalize first letter of each word)
const displayCategory = category
  .split(' ')
  .map(word => word.charAt(0).toUpperCase() + word.slice(1))
  .join(' ');
---

<BaseLayout title={`${displayCategory} | Portfolio Blog`} description={`Posts about ${category}`}>
  <div class="category-header">
    <h1>{displayCategory}</h1>
    <p>Found {posts.length} post{posts.length !== 1 ? 's' : ''} in this category</p>
    <a href="/categories" class="back-to-categories">‚Üê All Categories</a>
  </div>
  
  {posts.length === 0 ? (
    <p>No posts found in this category.</p>
  ) : (
    <div class="posts-grid">
      {processedPosts.map(({ post, readingTime, excerpt }) => (
        <PostCard 
          post={post} 
          baseUrl={baseUrl} 
          readingTime={readingTime} 
          excerpt={excerpt} 
          client:load 
        />
      ))}
    </div>
  )}
</BaseLayout>

<style>
  .category-header {
    margin-bottom: 3rem;
  }
  
  h1 {
    margin-bottom: 0.5rem;
  }
  
  .back-to-categories {
    display: inline-block;
    margin-top: 1rem;
    text-decoration: none;
    color: var(--primary-color);
  }
</style>